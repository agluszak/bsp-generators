use serde::{Deserialize, Serialize};

use crate::*;

#[derive(Clone, Debug, Default, Eq, PartialEq, Hash, Ord, PartialOrd, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CompileParams {
    /// A sequence of build targets to compile.
    pub targets: Vec<BuildTargetIdentifier>,
    /// A unique identifier generated by the client to identify this request.
    /// The server may include this id in triggered notifications or responses.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<Identifier>,
    /// Optional arguments to the compilation process.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub arguments: Option<Vec<String>>,
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::tests::*;
    use insta::assert_json_snapshot;

    #[test]
    fn compile_params() {
        assert_json_snapshot!(
           CompileParams {targets: vec![BuildTargetIdentifier::default()], origin_id: Some(Identifier::default()), arguments: Some(vec![TEST_STRING.to_string()])},
           @r#"
{
  "targets": [
    {
      "uri": ""
    }
  ],
  "originId": "",
  "arguments": [
    "test_string"
  ]
}
   "#
        );
    }
}
